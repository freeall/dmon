#!/bin/bash

. $(bashkit path)

LAUNCHD="silent type launchd"
UPSTART="silent type initctl"

opt --upstart && UPSTART=true  LAUNCHD=false
opt --launchd && UPSTART=false LAUNCHD=true
opt --no-root

LOGS=$DIRNAME/logs
SCRIPTS=$DIRNAME/scripts

rooted () {
	opt --no-root && return 0
	if [ $EUID -ne 0 ]; then
		sudo $FILENAME "${ARGV[@]}"
		exit $?
	fi
}

validate () {
	[ $# = 0 ] && error name is required
}

list-deamons () {
	if   $LAUNCHD; then ls /Library/LaunchDaemons | grep com.dmon | sed 's/com.dmon.//' | sed 's/.plist//'
	elif $UPSTART; then ls /etc/init | grep dmon. | sed 's/dmon.//' | sed 's/.conf//'
	fi
}

tab-2 () {
	list-deamons
}

opt create --script,-s --out,-o
cmd-create () { # create a new daemon. use --script to specify an inline command
	validate $@
	rooted

	local name=$1
	local script=$2
	local dir=$CWD

	mkdir -p $LOGS
	mkdir -p $SCRIPTS

	[ $# \< 2 ] && not opt --script && error file or --script required

	render () {
		local file=$(cat $1)
		shift
		while [ $# != 0 ]; do
			[ "${1:0:2}" != "--" ] && shift && continue
			local name=\{${1//-/}\}
			file="${file//$name/$2}"
			shift; shift
		done
		echo "$file"
	}

	if opt --script; then
		script=${opt_out:-$SCRIPTS/$name.sh}
		echo "$opt_script" > "$script"
	else
		local base=$(basename $script)
		cd $(dirname $base)
		dir=$PWD
		script=$PWD/$base
	fi

	[ ! -e "$script" ] && error file does not exist

	chmod +x $script

	if   $LAUNCHD; then render $DIRNAME/launchd.xml  --cwd "$dir" --name "$name" --script "$script" --logs "$LOGS" --path "$PATH" > /Library/LaunchDaemons/com.dmon.$name.plist
	elif $UPSTART; then render $DIRNAME/upstart.conf --cwd "$dir" --name "$name" --script "$script" --logs "$LOGS" > /etc/init/dmon.$name.conf
	else error no daemon provider found
	fi
}

cmd-remove () { # stops and removes a daemon
	validate $@
	rooted $@

	silent $FILENAME stop $1

	rm -f $LOGS/$1.{err,out}.log
	rm -f $SCRIPTS/$1.sh

	if   $LAUNCHD; then rm -f /Library/LaunchDaemons/com.dmon.$1.plist
	elif $UPSTART; then rm -f /etc/init/dmon.$1.conf
	else error no daemon provider found
	fi
}

opt start --script,-s
cmd-start () { # starts a daemon
	validate $@
	rooted $@

	rm -f /var/log/dmon/$1.log
	opt --script && ($FILENAME create $1 --script "$opt_script" || return $?)

	if   $LAUNCHD; then launchctl load -w /Library/LaunchDaemons/com.dmon.$1.plist
	elif $UPSTART; then service dmon.$1 start
	else error no daemon provider found
	fi
}

cmd-stop () { # stops a daemon
	validate $@
	rooted $@

	if   $LAUNCHD; then launchctl unload -w /Library/LaunchDaemons/com.dmon.$1.plist
	elif $UPSTART; then service dmon.$1 stop
	else error no daemon provider found
	fi
}

cmd-restart () { # shorthand for doing a stop and a start
	validate $@
	rooted $@

	silent $FILENAME stop $1
	$FILENAME start $1
}

cmd-describe () { # cat the config file of a daemon
	validate $@

	if   $LAUNCHD; then cat /Library/LaunchDaemons/com.dmon.$1.plist
	elif $UPSTART; then cat /etc/init/dmon.$1.conf
	else error no daemon provider found
	fi
}

opt list --no-status
cmd-list () { # lists daemons created by dmon
	opt --no-status && list-deamons && return $?
	rooted $@

	for daemon in $(list-deamons); do
		if   $LAUNCHD; then echo $daemon $(silent launchctl list com.dmon.$daemon && echo running || echo stopped)
		elif $UPSTART; then echo $daemon $(silent initctl status dmon.$daemon && echo running || echo stopped)
		else echo $daemon
		fi
	done
}

opt log --follow,-f
cmd-log () { # print the log from a daemon
	validate $@
	[ ! -e $LOGS/$1.out.log ] && error no logs available

	tail $(opt --follow && echo -f || echo -n+1) $LOGS/$1.{err,out}.log
}

run